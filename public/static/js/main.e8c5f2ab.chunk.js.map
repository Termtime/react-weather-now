{"version":3,"sources":["Components/WeatherIcon.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherIcon","weather","icon","className","toLowerCase","class","Fragment","App","useEffect","navigator","geolocation","getCurrentPosition","data","a","lon","coords","longitude","lat","latitude","endpoint","axios","get","jsonRes","temperatureData","feels","main","feels_like","humidity","min","temp_min","max","temp_max","curr","temp","console","log","setLocation","city","name","country","sys","setWeather","title","desc","description","setTemperature","setDisplayTemp","unit","err","useState","location","temperature","displayTemp","toggleUnits","fBtn","document","getElementById","cBtn","classList","add","remove","convertedData","toFixed","id","onClick","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e8c5f2ab.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../Styles/AnimatedWeatherIcons.css\";\r\nexport const WeatherIcon = ({ weather }) => {\r\n  let icon = (\r\n    <div className=\"icon sun-shower\">\r\n      <div className=\"cloud\"></div>\r\n      <div className=\"sun\">\r\n        <div className=\"rays\"></div>\r\n      </div>\r\n      <div className=\"rain\"></div>\r\n    </div>\r\n  );\r\n  switch (weather.toLowerCase()) {\r\n    case \"clear\":\r\n      icon = (\r\n        <div class=\"icon sunny\">\r\n          <div class=\"sun\">\r\n            <div class=\"rays\"></div>\r\n          </div>\r\n        </div>\r\n      );\r\n      break;\r\n    case \"clouds\":\r\n      icon = (\r\n        <div class=\"icon cloudy\">\r\n          <div class=\"cloud\"></div>\r\n          <div class=\"cloud\"></div>\r\n        </div>\r\n      );\r\n      break;\r\n    case \"rainy\":\r\n      icon = (\r\n        <div class=\"icon rainy\">\r\n          <div class=\"cloud\"></div>\r\n          <div class=\"rain\"></div>\r\n        </div>\r\n      );\r\n      break;\r\n    default:\r\n  }\r\n  return <React.Fragment>{icon}</React.Fragment>;\r\n};\r\n","import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"jquery\";\nimport \"popper.js\";\nimport \"bootstrap/dist/js/bootstrap\";\nimport \"./Styles/App.css\";\nimport { WeatherIcon } from \"./Components/WeatherIcon\";\nconst App = () => {\n  useEffect(() => {\n    //get the user's location and return the desired data.\n    navigator.geolocation.getCurrentPosition(\n      async (data) => {\n        let lon = data.coords.longitude;\n        let lat = data.coords.latitude;\n        const endpoint = `https://weather-proxy.freecodecamp.rocks/api/current?lon=${lon}&lat=${lat}`;\n        let jsonRes = await axios.get(endpoint);\n        let temperatureData = {\n          feels: jsonRes.data.main.feels_like,\n          humidity: jsonRes.data.main.humidity,\n          min: jsonRes.data.main.temp_min,\n          max: jsonRes.data.main.temp_max,\n          curr: jsonRes.data.main.temp,\n        };\n        console.log(jsonRes);\n        setLocation({\n          city: jsonRes.data.name,\n          country: jsonRes.data.sys.country,\n        });\n        setWeather({\n          title: jsonRes.data.weather[0].main,\n          desc: jsonRes.data.weather[0].description,\n        });\n        setTemperature(temperatureData);\n        setDisplayTemp({\n          data: temperatureData,\n          unit: \"C\",\n        });\n      },\n      (err) => console.log(err)\n    );\n  }, []);\n\n  const [location, setLocation] = useState(\"Unspecified\");\n  const [weather, setWeather] = useState(null);\n  const [temperature, setTemperature] = useState(null);\n  const [displayTemp, setDisplayTemp] = useState(null);\n  function toggleUnits() {\n    let fBtn = document.getElementById(\"f-btn\");\n    let cBtn = document.getElementById(\"c-btn\");\n    if (displayTemp.unit == \"C\") {\n      //toggle to Farenheit\n      fBtn.classList.add(\"selected\");\n      cBtn.classList.remove(\"selected\");\n      let convertedData = {\n        feels: ((temperature.feels * 9) / 5 + 32).toFixed(2),\n        max: ((temperature.max * 9) / 5 + 32).toFixed(2),\n        min: ((temperature.min * 9) / 5 + 32).toFixed(2),\n        curr: ((temperature.curr * 9) / 5 + 32).toFixed(2),\n        humidity: temperature.humidity,\n      };\n      setDisplayTemp({\n        data: convertedData,\n        unit: \"F\",\n      });\n    } else {\n      fBtn.classList.remove(\"selected\");\n      cBtn.classList.add(\"selected\");\n      setDisplayTemp({\n        data: temperature,\n        unit: \"C\",\n      });\n    }\n  }\n  console.log(weather);\n  return (\n    <div className=\"App container row\">\n      {weather && displayTemp ? (\n        <React.Fragment>\n          <div className=\"container col\">\n            <main id=\"current-weather\">\n              <div className=\"row center text-center\">\n                <h2>\n                  Weather in {location.city}, {location.country}\n                </h2>\n              </div>\n              <br />\n              <h1 className=\"row center\">{weather.title}</h1>\n              <small className=\"row center text-white text-capitalize\">\n                {weather.desc}\n              </small>\n              <div id=\"weather-icon\" className=\"row center\">\n                <WeatherIcon weather={weather.title} />\n              </div>\n              <div className=\"row center mb-4 mt-3\">\n                <h1>\n                  {displayTemp.data.curr} °{displayTemp.unit}\n                </h1>\n              </div>\n              <div className=\"row center my-3\">\n                <h3 className=\"mx-4\">\n                  Min: {displayTemp.data.min} °{displayTemp.unit}\n                </h3>\n                <h3 className=\"mx-4\">\n                  Max: {displayTemp.data.max} °{displayTemp.unit}\n                </h3>\n              </div>\n              <div className=\"row center my-3\">\n                <h3 className=\"mx-3\">Humidity: {displayTemp.data.humidity}%</h3>\n                <h3 className=\"mx-3\">\n                  Feels like {displayTemp.data.feels} °{displayTemp.unit}\n                </h3>\n              </div>\n            </main>\n            <footer className=\"user-select-none col center mt-5\">\n              <div className=\"container\">\n                <div className=\"row center\">\n                  <h3\n                    id=\"c-btn\"\n                    className=\"hover-scale col-1 selected\"\n                    onClick={toggleUnits}\n                  >\n                    °C\n                  </h3>\n                  <h3\n                    id=\"f-btn\"\n                    className=\"hover-scale col-1\"\n                    onClick={toggleUnits}\n                  >\n                    °F\n                  </h3>\n                </div>\n                <div className=\"row center mb-1 text-white\">\n                  <p>\n                    Made by Mario Mejia.{\"  \"}\n                    <a href=\"https://github.com/Termtime\">Github</a>\n                  </p>\n                </div>\n              </div>\n            </footer>\n          </div>\n        </React.Fragment>\n      ) : (\n        <React.Fragment>\n          <div>\n            <h1>\n              Please allow location use to retrieve the current weather in your\n              area.\n            </h1>\n          </div>\n        </React.Fragment>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}